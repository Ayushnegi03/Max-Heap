#MAX Heap
#A Max-Heap is a complete binary tree in which the value in each
# internal node is greater than or equal to the values in 
# the children of that node.

def heap(Arr, N, i):
    Largest = i
    L = 2 * i + 1
    R = 2 * i + 2 
    
    if L < N and Arr[i] < Arr[L]:
        Largest = L
    
    if R < N and Arr[Largest] < Arr[R]:
        Largest = R
    
    if Largest != i:
        Arr[i],Arr[Largest] = Arr[Largest],Arr[i]
        heap(Arr, N, Largest)

def insert(Array, Newnum):
    Size = len(Array)
    if Size == 0:
        Array.append(Newnum)
    else:
        Array.append(Newnum);
        for i in range((Size//2)-1, -1, -1):
            heap(Array, Size, i)

def deleteNode(Array, Num):
    Size = len(Array)
    i = 0
    for i in range(0, Size):
        if Num == Array[i]:
            break
    Array[i], Array[Size-1] = Array[Size-1], Array[i]
    Array.remove(Num)
    for i in range((len(Array)//2)-1, -1, -1):
        heap(Array, len(Array), i)
Arr = []
insert(Arr, 3)
insert(Arr, 4)
insert(Arr, 9)
insert(Arr, 5)
insert(Arr, 2)
insert(Arr, 14)
insert(Arr, 7)
insert(Arr, 25)
insert(Arr, 6)
insert(Arr, 1)

print ("Max-Heap array: " + str(Arr))
#Output->
#Max-Heap array: [25, 14, 9, 6, 2, 4, 7, 3, 5, 1]
